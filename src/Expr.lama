-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr(st, expr) {
  case expr of
      Var (string)                -> st(string)
    | Const (n)                   -> n
    | Binop(string, expr1, expr2) -> evalBinOp(string, expr1, expr2)
    | _                           -> failure("evalExpr: `expr` of wrong type\n")
  esac
}

fun evalBinOp(op, l, r) {
  case op of
      "+"  -> l + r
    | "-"  -> l - r
    | "*"  -> l * r
    | "/"  -> l / r
    | "%"  -> l % r
    | "<"  -> l < r
    | ">"  -> l > r
    | "<=" -> l <= r
    | ">=" -> l >= r
    | "=="  -> l == r
    | "!=" -> l != r
    | "&&"  -> l && r
    | "!!"  -> l !! r
  esac
}
