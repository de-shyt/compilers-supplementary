-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval(c@[state, world], stmt) {
  case stmt of
      Assn (string, expr) -> [state <- [string, evalExpr(state, expr)], world]
    | Seq (st1, st2)      -> eval(eval(c, st1), st2)
    | Skip                -> c
    | Read (string)       -> case readWorld(world) of
        [value, newWorld] -> [state <- [string, value], newWorld]
      esac
    | Write (expr)        -> [state, writeWorld(evalExpr(state, expr), world)]
    | _                   -> failure("Unknown command\n")
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt(input, stmt) {
  eval([emptyState, createWorld(input)], stmt).snd.getOutput
}
